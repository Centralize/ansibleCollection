# deploy_redmine_singlefile.yml (Definitive Version)

- name: Deploy latest Redmine (Single File)
  hosts: all
  become: yes
  vars:
    # --- System Settings ---
    app_user: redmine
    redmine_version: "5.1.3" # Tjek https://www.redmine.org/projects/redmine/wiki/Download for seneste version
    redmine_home: "/home/redmine"
    redmine_root: "{{ redmine_home }}/redmine"

    # --- Database Settings (Password is generated for security) ---
    db_name: "redmine_prod"
    db_user: "redmine_user"
    db_password: "{{ lookup('password', '/dev/null length=32') }}"

    # --- Nginx Settings ---
    server_name: "_" # Erstat med dit dom√¶nenavn, f.eks. redmine.ditdomaene.dk

  tasks:
    - name: Update apt cache and install prerequisites
      apt:
        name:
          - build-essential
          - ruby-full
          - ruby-dev
          - libpq-dev
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
          - nginx
          - imagemagick
          - libmagickwand-dev
          - zlib1g-dev
          - libssl-dev
          - git
          - libxml2-dev
          - libxslt1-dev
        state: present
        update_cache: yes

    - name: Create PostgreSQL database and user
      block:
        - name: Create database user for Redmine
          community.postgresql.postgresql_user:
            name: "{{ db_user }}"
            password: "{{ db_password }}"
          become_user: postgres
        - name: Create Redmine database
          community.postgresql.postgresql_db:
            name: "{{ db_name }}"
            owner: "{{ db_user }}"
          become_user: postgres

    - name: Create a dedicated system user for Redmine
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        home: "{{ redmine_home }}"
        create_home: yes

    - name: Download and unpack Redmine
      unarchive:
        src: "https://www.redmine.org/releases/redmine-{{ redmine_version }}.tar.gz"
        dest: "{{ redmine_home }}"
        remote_src: yes
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        creates: "{{ redmine_home }}/redmine-{{ redmine_version }}/Rakefile"

    - name: Create symlink to the current Redmine version
      file:
        src: "{{ redmine_home }}/redmine-{{ redmine_version }}"
        dest: "{{ redmine_root }}"
        state: link
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: Create database configuration file
      copy:
        dest: "{{ redmine_root }}/config/database.yml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0640'
        content: |
          production:
            adapter: postgresql
            database: {{ db_name }}
            host: localhost
            username: {{ db_user }}
            password: "{{ db_password }}"
            encoding: utf8

    - name: Install Bundler
      gem:
        name: bundler
        state: present

    # FIX: Use legacy-compatible method to find the bundle executable path
    - name: Get full gem environment (legacy compatible)
      shell: gem environment
      register: gem_full_env
      changed_when: false
      check_mode: no

    - name: Parse executable directory from gem environment
      set_fact:
        gem_exec_path: "{{ (gem_full_env.stdout_lines | select('match', 'EXECUTABLE DIRECTORY') | first).split(': ')[1] }}"

    - name: Install Redmine dependencies using the bundler module
      ansible.builtin.bundler:
        state: present
        chdir: "{{ redmine_root }}"
        executable: "{{ gem_exec_path }}/bundle"
        exclude_groups:
          - development
          - test
      become_user: "{{ app_user }}"

    - name: Generate secret token
      command:
        cmd: "{{ gem_exec_path }}/bundle exec rake generate_secret_token"
        chdir: "{{ redmine_root }}"
      become_user: "{{ app_user }}"
      args:
        creates: "{{ redmine_root }}/config/initializers/secret_token.rb"

    - name: Run database migrations
      command:
        cmd: "{{ gem_exec_path }}/bundle exec rake db:migrate"
        chdir: "{{ redmine_root }}"
      environment:
        RAILS_ENV: production
      become_user: "{{ app_user }}"
      register: db_migrate_status
      changed_when: "'Migrating to' in db_migrate_status.stdout"

    - name: Create directories for Puma
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ redmine_root }}/tmp/sockets"
        - "{{ redmine_root }}/tmp/pids"

    - name: Create Puma systemd service file
      copy:
        dest: /etc/systemd/system/puma-redmine.service
        content: |
          [Unit]
          Description=Puma HTTP Server for Redmine
          After=network.target

          [Service]
          Type=simple
          User={{ app_user }}
          Group={{ app_user }}
          WorkingDirectory={{ redmine_root }}
          ExecStart={{ gem_exec_path }}/bundle exec puma -e production -b unix://{{ redmine_root }}/tmp/sockets/puma.sock
          Restart=always

          [Install]
          WantedBy=multi-user.target
      notify: Reload systemd and restart Puma

    - name: Configure Nginx for Redmine
      copy:
        dest: /etc/nginx/sites-available/redmine
        content: |
          upstream redmine_app {
            server unix:{{ redmine_root }}/tmp/sockets/puma.sock fail_timeout=0;
          }

          server {
              listen 80;
              server_name {{ server_name }};

              root {{ redmine_root }}/public;
              try_files $uri/index.html $uri.html @redmine_app;

              location @redmine_app {
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header Host $http_host;
                  proxy_redirect off;
                  proxy_pass http://redmine_app;
              }

              error_page 500 502 503 504 /500.html;
              client_max_body_size 25M;
              keepalive_timeout 10;
          }
      notify: Restart Nginx

    - name: Enable the Nginx site and remove default
      block:
        - name: Enable Redmine site
          file:
            src: /etc/nginx/sites-available/redmine
            dest: /etc/nginx/sites-enabled/redmine
            state: link
        - name: Remove default Nginx site
          file:
            path: /etc/nginx/sites-enabled/default
            state: absent
      notify: Restart Nginx

  handlers:
    - name: Reload systemd and restart Puma
      systemd:
        name: puma-redmine
        daemon_reload: yes
        state: restarted
        enabled: yes

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
